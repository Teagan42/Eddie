name: CI
permissions:
  contents: read
  actions: write

on:
  pull_request:
    branches:
      - "*"

jobs:
  workspace-matrix:
    name: Generate workspace matrix
    runs-on: ubuntu-latest
    outputs:
      lint: ${{ steps.export.outputs.lint }}
      build: ${{ steps.export.outputs.build }}
      test: ${{ steps.export.outputs.test }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-20.x-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: ./scripts/install.sh

      - name: Build ci-support package
        run: npm run build --workspace @eddie/ci-support

      - name: Export workspace matrices
        id: export
        run: node packages/ci-support/scripts/export-matrix.cjs

  lint:
    name: Lint (${{ matrix.workspace.name }})
    runs-on: ubuntu-latest
    needs: workspace-matrix
    strategy:
      matrix: ${{ fromJson(needs['workspace-matrix'].outputs.lint) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: ./scripts/install.sh

      - name: Run lint
        run: npm run lint --workspace ${{ matrix.workspace.name }}

  build:
    name: Build (${{ matrix.workspace.name }})
    runs-on: ubuntu-latest
    needs:
      - workspace-matrix
      - lint
    strategy:
      matrix: ${{ fromJson(needs['workspace-matrix'].outputs.build) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: ./scripts/install.sh

      - name: Restore build cache
        id: restore-build
        uses: actions/cache@v4
        with:
          path: |
            ${{ matrix.workspace.dist }}
            ${{ matrix.workspace.tsbuildinfo }}
          key: ${{ runner.os }}-build-${{ matrix.workspace.name }}-${{ hashFiles('package-lock.json') }}-${{ hashFiles(matrix.workspace.tsconfig) }}

      - name: Run prebuild commands
        if: ${{ matrix.workspace.prebuild }}
        run: |
          set -euo pipefail
          ${{ join(matrix.workspace.prebuild, '\n          ') }}

      - name: Run build
        run: npm run build --workspace ${{ matrix.workspace.name }}

  test:
    name: Test (${{ matrix.workspace.name }} @ Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs:
      - workspace-matrix
      - build
    strategy:
      matrix: ${{ fromJson(needs['workspace-matrix'].outputs.test) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: ./scripts/install.sh

      - name: Run tests
        run: npm run test --workspace ${{ matrix.workspace.name }} -- --coverage

      - name: Detect coverage output
        if: always()
        id: coverage-dir
        run: |
          if [ -d "${{ matrix.workspace.coverage }}" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload coverage
        if: always() && matrix.node-version == '20.x' && steps.coverage-dir.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.workspace.coverageArtifact }}
          path: ${{ matrix.workspace.coverage }}
          if-no-files-found: error

  summary:
    name: CI summary
    runs-on: ubuntu-latest
    needs:
      - lint
      - build
      - test
    if: ${{ always() }}
    steps:
      - name: Report overall status
        run: |
          declare -A results
          results[lint]="${{ needs.lint.result }}"
          results[build]="${{ needs.build.result }}"
          results[test]="${{ needs.test.result }}"

          printf "%-10s %s\n" "Job" "Result"
          for job in "${!results[@]}"; do
            printf "%-10s %s\n" "$job" "${results[$job]}"
          done

          for job in "${!results[@]}"; do
            if [ "${results[$job]}" != "success" ]; then
              echo "::error title=CI summary::Job '$job' finished with status '${results[$job]}'"
              exit 1
            fi
          done

          echo "All matrix jobs completed successfully."
