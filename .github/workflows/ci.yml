name: CI
permissions:
  contents: write
  actions: write

on:
  pull_request:
    branches:
      - "*"

jobs:
  workspace-matrix:
    name: Generate workspace matrix
    runs-on: ubuntu-latest
    outputs:
      lint: ${{ steps.export.outputs.lint }}
      test: ${{ steps.export.outputs.test }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-20.x-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: ./scripts/install.sh

      - name: Build ci-support package
        run: npm run build --workspace @eddie/ci-support

      - name: Determine changed workspaces
        id: changed
        env:
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          HEAD_SHA: ${{ github.sha }}
        run: |
          set -euo pipefail
          CHANGED=$(node packages/ci-support/scripts/detect-changed-workspaces.cjs "${BASE_SHA:-}" "${HEAD_SHA:-}")
          echo "names=${CHANGED}" >> "$GITHUB_OUTPUT"

      - name: Export workspace matrices
        id: export
        env:
          CHANGED_WORKSPACES: ${{ steps.changed.outputs.names }}
        run: node packages/ci-support/scripts/export-matrix.cjs

  lint:
    name: Lint (${{ matrix.workspace.name }})
    runs-on: ubuntu-latest
    needs: workspace-matrix
    strategy:
      matrix: ${{ fromJson(needs['workspace-matrix'].outputs.lint) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: ./scripts/install.sh

      - name: Run lint
        run: npm run lint --workspace ${{ matrix.workspace.name }}

  docs-config-schema:
    name: Docs (config schema)
    runs-on: ubuntu-latest
    needs: workspace-matrix
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-20.x-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: ./scripts/install.sh

      - name: Verify configuration schema diagram
        run: npm run docs:config-schema:check

  build-test:
    name: Build & Test (${{ matrix.workspace.name }} @ Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs:
      - workspace-matrix
      - lint
    strategy:
      matrix: ${{ fromJson(needs['workspace-matrix'].outputs.test) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: ./scripts/install.sh

      - name: Build entire project
        run: npm run build --workspaces

      - name: Run tests
        run: npm run test --workspace ${{ matrix.workspace.name }} -- --coverage

      - name: Detect coverage output
        if: always()
        id: coverage-dir
        run: |
          if [ -d "${{ matrix.workspace.coverage }}" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload coverage
        if: always() && matrix.node-version == '20.x' && steps.coverage-dir.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.workspace.coverageArtifact }}
          path: ${{ matrix.workspace.coverage }}
          if-no-files-found: error

  sync-third-party-licenses:
    name: Sync third-party notices
    runs-on: ubuntu-latest
    needs:
      - build-test
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-20.x-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: ./scripts/install.sh

      - name: Regenerate third-party notices
        run: npm run licenses:write

      - name: Commit updated notices
        id: commit
        run: |
          set -euo pipefail
          if git status --porcelain=./THIRD_PARTY_NOTICES.md | grep .; then
            git add THIRD_PARTY_NOTICES.md
            git commit --all --message "chore: update third-party notices"
            echo "committed=true" >> "$GITHUB_OUTPUT"
          else
            echo "committed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Push updates
        if: steps.commit.outputs.committed == 'true'
        run: git push

  summary:
    name: CI summary
    runs-on: ubuntu-latest
    needs:
      - lint
      - build-test
      - sync-third-party-licenses
      - docs-config-schema
    if: ${{ always() }}
    steps:
      - name: Report overall status
        run: |
          declare -A results
          results[lint]="${{ needs.lint.result }}"
          results["build-test"]="${{ needs['build-test'].result }}"
          results["sync-third-party-licenses"]="${{ needs['sync-third-party-licenses'].result }}"
          results["docs-config-schema"]="${{ needs['docs-config-schema'].result }}"

          printf "%-10s %s\n" "Job" "Result"
          declare -a jobs=("${!results[@]}")

          for job in "${jobs[@]}"; do
            printf "%-10s %s\n" "$job" "${results["$job"]}"
          done

          for job in "${jobs[@]}"; do
            if [ "${results["$job"]}" != "success" ]; then
              echo "::error title=CI summary::Job '$job' finished with status '${results["$job"]}'"
              exit 1
            fi
          done

          echo "All matrix jobs completed successfully."
