name: Tag Release

on:
  push:
    branches:
      - main

jobs:
  tag:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'github-actions[bot]' && !contains(github.event.head_commit.message, 'chore: release v') }}
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version bump
        id: bump
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { data } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner,
              repo,
              commit_sha: context.sha,
            });
            if (!data.length) {
              core.info('No associated pull request found; defaulting to patch bump.');
              core.setOutput('bump', 'patch');
              core.setOutput('pr_number', '');
              return;
            }
            const pr = data[0];
            const labels = (pr.labels || []).map((label) => label.name.toLowerCase());
            const priorities = ['major', 'minor', 'patch'];
            let bump = 'patch';
            for (const level of priorities) {
              if (labels.includes(level)) {
                bump = level;
                break;
              }
            }
            core.info(`Selected ${bump} bump based on PR #${pr.number} labels: ${labels.join(', ')}`);
            core.setOutput('bump', bump);
            core.setOutput('pr_number', pr.number?.toString() ?? '');

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install dependencies
        run: npm ci

      - name: Bump version
        id: version
        run: |
          npm version ${{ steps.bump.outputs.bump }} --no-git-tag-version
          echo "version=$(node -p \"require('./package.json').version\")" >> "$GITHUB_OUTPUT"

      - name: Create release pull request
        uses: peter-evans/create-pull-request@v6
        with:
          branch: release/v${{ steps.version.outputs.version }}
          commit-message: chore: release v${{ steps.version.outputs.version }}
          title: chore: release v${{ steps.version.outputs.version }}
          committer: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
          author: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
          labels: release

      - name: Refresh repository state
        run: git fetch origin main --depth=1

      - name: Read package version
        id: package
        run: echo "version=$(node -p \"require('./package.json').version\")" >> "$GITHUB_OUTPUT"

      - name: Capture HEAD sha
        id: head
        run: echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Create tag if needed
        uses: actions/github-script@v7
        env:
          VERSION: ${{ steps.package.outputs.version }}
        with:
          script: |
            const version = process.env.VERSION;
            if (!version) {
              core.setFailed('Version not found in package.json');
              return;
            }
            const tag = `v${version}`;
            const { owner, repo } = context.repo;
            try {
              await github.rest.git.getRef({
                owner,
                repo,
                ref: `tags/${tag}`,
              });
              core.info(`Tag ${tag} already exists, skipping.`);
            } catch (error) {
              if (error.status !== 404) {
                throw error;
              }
              await github.rest.git.createRef({
                owner,
                repo,
                ref: `refs/tags/${tag}`,
                sha: '${{ steps.head.outputs.sha }}',
              });
              core.info(`Tag ${tag} created for ${context.sha}.`);
            }
